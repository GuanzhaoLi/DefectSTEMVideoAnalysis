
# coding: utf-8

# In[25]:


import csv
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from PIL import Image

###########################################################################################
# TODO: Set filepaths
#
#txt file containing name of files
listofFiles = '/Users/wudongxia/Desktop/YOLO/train/images.txt'
#
#CSV file generated by FIJI
csv_filepath = '/Users/wudongxia/Desktop/YOLO/train/results/'
#
#Log file describing label ranges
log_filepath = '/Users/wudongxia/Desktop/YOLO/train/logs/' 
#
# Directory where bounding box txt files will be saved:
output_directory_path = '/Users/wudongxia/Desktop/YOLO/train/bounding_box/'
###############################################################################################


# In[20]:


#Function to parse log file
def parsetxt(filename):
    with open(filename) as f:
        defectTypes = {}
        
        #iterates through the three defect types
        for i in range(3):
            f.readline()
            line = f.readline()
            defectTypes[i] = line.strip().split()
            for j in range(len(defectTypes[i])):
                defectTypes[i][j] = int(defectTypes[i][j])
            f.readline()
    return defectTypes


# In[21]:


#Function to parse CSV file
def parsecsv(filename, defectTypes):
    counter0 = 0
    counter1 = 0
    counter2 = 0
    labels = {}
    with open(filename) as csvfile:
        reader = csv.reader(csvfile)
        temp = 0
        for row in reader:
            if (temp == 0):
                temp = 1
                if (
                    row[5] != 'X' or
                    row[6] != 'Y' or
                    row[11] != 'Width' or
                    row[12] != 'Height'
                ):
                    raise ValueError()
            else:
                
                #save values in variables
                label = int(row[0])
                X = float(row[5])
                Y = float(row[6])
                width = int(row[11])
                height = int(row[12])
                defectType = 5
                
                #identify defect
                if ( (len(defectTypes[0]) != 0) and (defectTypes[0][0]) <= label <= (defectTypes[0][1])):
                    defectType = 0
                    
                elif ((len(defectTypes[1]) != 0) and (defectTypes[1][0]) <= label <= (defectTypes[1][1])):
                    defectType = 1
                elif ((len(defectTypes[2]) != 0) and (defectTypes[2][0]) <= label <= (defectTypes[2][1])):
                    defectType = 2

                labels[label] = [defectType, X, Y, width, height]
    return labels


# In[22]:


def labelImage(imagename, labels):
    im = Image.open(imagename)
    fig, ax = plt.subplots(1)
    ax.imshow(im)
    for i in range(1,len(labels)+1):
        x = labels[i][1] - labels[i][3] / 2 - 10
        y = labels[i][2] - labels[i][4] / 2 - 10
        width = labels[i][3] + 20
        height = labels[i][4] + 20
        if(labels[i][0] == 0):
             color = 'r'
        elif(labels[i][0] == 1):
            color = 'g'
        elif(labels[i][0] == 2):
            color = 'b'
        else:
             color = 'y'
        rect = patches.Rectangle((x, y), width, height, linewidth = 1, edgecolor = color, facecolor = 'none')
        ax.add_patch(rect)
        ax.text(x, y, i)
    plt.show()


# In[23]:


def calculateBoundingBoxes(defect, x,y, w,h):
    X1 = x - (w/2)
    Y1 = y - (h/2)
    X2 = x + (w/2)
    Y2 = y + (h/2)
    
    return [defect, round(X1,2), round(Y1,2), round(X2,2), round(Y2,2)]


# In[26]:


with open(listofFiles) as f:
    filename = f.readline()[:-4]
   
    while filename:
    
        filetxt =  log_filepath + filename + '_log.txt'
        filecsv =  csv_filepath + filename + '_results.csv'
        
        try:
            defect = '111' 
            defectTypes_gt = parsetxt(filetxt)

            
            labels_gt = parsecsv(filecsv, defectTypes_gt)
            print(filename)
            outfile = output_directory_path + filename + '.txt'
        
            fout = open(outfile, mode = 'w+')
        
            for i in range(1, len(labels_gt) + 1):
                if(labels_gt[i][0] == 0 or labels_gt[i][0] == 1 or labels_gt[i][0] == 2 ):
                    if(labels_gt[i][0] == 0):
                        defect == '111'
                    elif(labels_gt[i][0] == 1):
                        defect ='BD'
                    elif(labels_gt[i][0] == 2):
                        defect = '100'
                    mylist = calculateBoundingBoxes(labels_gt[i][0], labels_gt[i][1], labels_gt[i][2], labels_gt[i][3], labels_gt[i][4])
                    fout.write(str(mylist[0]) +' ' + str(mylist[1]) + ' ' + str(mylist[2]) + ' ' + str(mylist[3]) + ' '+ str(mylist[4]) + ' ' + defect +'\n')

            fout.close()
            filename = f.readline()[:-5]
            

    
        except Exception as e:
            print(e)
            filename = f.readline()[:-5]

